when RULE_INIT {
    # enable (1) / disable (0) logging
    set static::contentswitching_debug 1
}
 
when HTTP_REQUEST {
    # Matching HTTP::host and HTTP::path to pool
    if { [catch { pool [class match -value [string tolower [HTTP::host][HTTP::path]] starts_with dg_applications] }]} {
        if { $static::contentswitching_debug } { log local0. "Caught exception: no pool matching for [string tolower [HTTP::host][HTTP::path]] ...retrying." }
        return
    }
    if { $static::contentswitching_debug } { log local0. "Using pool: [LB::server pool]" }
    
    # Set STREAM expression for HTTP_RESPONE context
    if { $static::contentswitching_debug } { log local0. "Matching URL for STREAM: [class match -name [string tolower [HTTP::path]] starts_with dg_link_rewrite ]" }
    if { [catch { set substitute [class match -value [string tolower [HTTP::path]] starts_with dg_link_rewrite ] } err ] } {
        return
    }
    
    # Rewrite Host request header
    if { $static::contentswitching_debug } { log local0. "Matching Internal Host: [class match -value [string tolower [HTTP::path]] starts_with dg_hostheader]" }
    if { [catch {HTTP::header replace host [class match -value [string tolower [HTTP::path]] starts_with dg_hostheader] } err ] } {
        if { $static::contentswitching_debug } { log local0. "Path rewrite error message: $err" }
        return
    }

    # Rewrite HTTP::path
    # Value is Case-Sensitive
    if { $static::contentswitching_debug } { log local0. "Matching URL for path rewrite: [class match -name [string tolower [HTTP::path]] starts_with dg_path-rewrite]" }
    if { [catch { HTTP::path "[string map [list "[class match -name [string tolower [HTTP::path]] starts_with dg_path-rewrite]" "[class match -value [string tolower [HTTP::path]] starts_with dg_path-rewrite]"] [string tolower [HTTP::path]]]" } err] } {
        if { $static::contentswitching_debug } { log local0. "Path rewrite error message: $err" }
        return
    }
   
    # Disable STREAM in HTTP_REQUEST context
    STREAM::disable
}

when HTTP_RESPONSE {
    # Rewrite Location response header
    # Value is Case-Sensitive / ohne string tolower kann auch der Key Case-Sensitive sein
    if { [HTTP::header exists Location] }{
        if { $static::contentswitching_debug } { log local0. "Matching HTTP Location header: [class match -name [string tolower [HTTP::header Location]] starts_with dg_return_path-rewrite]" }
        HTTP::header replace Location "[string map [list "[class match -name [string tolower [HTTP::header Location]] starts_with dg_return_path-rewrite]" "[class match -value [HTTP::header Location] starts_with dg_return_path-rewrite]"] [string tolower [HTTP::header Location]]]"
        if { $static::contentswitching_debug } { log local0. "New HTTP Location header: [HTTP::header Location]" }
    }
    
    # Substitute internal hyperlinks in response
    # Achtung: Problem kann entstehen bei Multiplexing - Variable $substitute fuer STREAM funktioniert nur im Kontext der tcp Verbindung
    if {$substitute ne ""} {
        if {[HTTP::header value Content-Type] starts_with "text"} {
            if { $static::contentswitching_debug } { log local0. "STREAM expression for substitution: $substitute" }
            STREAM::expression [string trim $substitute " "]
            STREAM::enable
        }
    }
}